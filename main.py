import streamlit as st
import pandas as pd
from catboost import CatBoostClassifier

import base64

st.set_page_config(
    page_title="Attrition Predictor",
    page_icon="ğŸ“Š",
    layout="centered",
    initial_sidebar_state="auto"
)


# CSS ile dairesel resimler ve arka plan ekliyoruz

st.markdown(
    """
    <style>
    .stApp {
        background-color: #D3D3D3;
        background-image: linear-gradient(to bottom, #ffffff, #D3D3D3);
    }
    </style>
    """,
    unsafe_allow_html=True
)


def image_to_base64(image_path):
    with open(image_path, "rb") as image_file:
        base64_image = base64.b64encode(image_file.read()).decode("utf-8")
    return base64_image

image_base64 = image_to_base64("arkaplan.JPG")

# CSS ile sidebar baÅŸlÄ±ÄŸÄ±nÄ± kÃ¼Ã§Ã¼ltÃ¼yoruz

# Sidebar iÃ§eriÄŸine yukarÄ±dan boÅŸluk ekliyoruz
st.sidebar.markdown("""
    <style>
    .sidebar-content {
        margin-top: 53px;  /* YukarÄ±dan boÅŸluk bÄ±rakmak iÃ§in */
    }
    </style>
    <div class="sidebar-content">
    """, unsafe_allow_html=True)


st.sidebar.markdown("""
    <style>
    .sidebar-title {
        font-size: 19px;
        font-weight: bold;
        color: black;
    }
    </style>
    <div class="sidebar-title">Page Selection</div>
    """, unsafe_allow_html=True)


# Sidebar'a seÃ§ici ekliyoruz
page = st.sidebar.selectbox("Choose a Page", ["Project Information", "Prediction"])





# Arka plan resmi eklemek iÃ§in CSS
st.markdown(
    f"""
    <style>
    [data-testid="stSidebar"] {{
        background-image: url("data:image/jpeg;base64,{image_base64}");
        background-size: cover;
    }}
    </style>
    """,
    unsafe_allow_html=True
)


# Proje Bilgileri sayfasÄ±
if page == "Project Information":
    # BÃ¼yÃ¼k baÅŸlÄ±k: HR Attrition Predictor
    st.markdown("<h1 style='text-align: left; color: black; font-size: 30px;'>Attrition Predictor</h1>",
                unsafe_allow_html=True)
    # KÃ¼Ã§Ã¼k baÅŸlÄ±k: A Data-Driven Approach to Workforce Stability
    st.markdown("<h4 style='text-align: left; color: grey;'>A Data-Driven Approach to Workforce Stability</h4>",
                unsafe_allow_html=True)


    # TakÄ±m Ã¼yeleri ve fotoÄŸraflar
    st.markdown("<h4 style='text-align: left; color: black;'>Our Team</h4>", unsafe_allow_html=True)


    # 3 Ã¼stte, 2 altta olacak ÅŸekilde fotoÄŸraflarÄ± ve isimleri yerleÅŸtirme
    col1, col2, col3 = st.columns(3)
    with col1:
        st.image("ecem.png", width=150, caption="Ecem Zeynep Iscanli")
    with col2:
        st.image("kosmas.png", width=150, caption="Kosmas Konomis")
    with col3:
        st.image("shivesh.png", width=150, caption="Shevish")

    col_left, col_right = st.columns([0.5, 1])

    with col_left:
        st.image("rhythm.png", width=150, caption="Rhythm Chaudhary")
    with col_right:
        st.image("ira.png", width=150, caption="Ira Ira")

    # Proje adÄ± ve amacÄ±
    st.subheader("Project Information")
    st.write("This project aims to predict employee attrition using advanced machine learning techniques. Attrition, also known as employee turnover, is a critical issue for organizations as it can lead to increased costs, loss of talent, and a negative impact on team morale. By predicting which employees are most likely to leave the company, HR departments can take proactive measures to improve retention, address employee concerns, and ensure workforce stability.")

    st.subheader("Project Purpose")
    st.write("""
    This project uses a CatBoost model to predict the likelihood of employee attrition based on factors like salary, job satisfaction, and work-life balance. By identifying employees at risk of leaving, the model provides HR teams with insights to improve retention strategies, reduce turnover costs, and make more informed decisions to retain key talent.
    """)

# Tahmin SayfasÄ±
elif page == "Prediction":
    st.title("Attrition Predictior")

    # Modelin eÄŸitildiÄŸi Ã¶zellikleri Ã¶ÄŸrenelim (modeldeki sÃ¼tunlar)
    Cat_model = CatBoostClassifier()
    Cat_model.load_model('catboost_model.cbm')  # Daha Ã¶nce kaydedilen modeli yÃ¼kle
    model_features = Cat_model.feature_names_  # Modelin beklediÄŸi tÃ¼m sÃ¼tunlar

    # BaÅŸlÄ±k boyutunu kÃ¼Ã§Ã¼ltmek iÃ§in HTML kullanÄ±yoruz
    st.markdown("<h3 style='text-align: left; color: black;'>Employee Data</h3>", unsafe_allow_html=True)

    # KullanÄ±cÄ±dan alÄ±nacak girdiler
    age = st.number_input("Age", min_value=18, max_value=65, value=30)
    distance_from_home = st.number_input("Distance From Home", min_value=0, max_value=100, value=5)
    monthly_income = st.number_input("Monthly Income", min_value=1000, max_value=20000, value=5000)
    years_at_company = st.number_input("Years At Company", min_value=0, max_value=40, value=5)
    years_in_current_role = st.number_input("Years In Current Role", min_value=0, max_value=20, value=5)
    years_since_last_promotion = st.number_input("Years Since Last Promotion", min_value=0, max_value=20, value=2)
    overtime = st.selectbox("Overtime", ['Yes', 'No'])
    environment_satisfaction = st.radio("Environment Satisfaction (1-4)", options=[1, 2, 3, 4], index=2)
    job_involvement = st.radio("Job Involvement (1-4)", options=[1, 2, 3, 4], index=2)
    job_satisfaction = st.radio("Job Satisfaction (1-4)", options=[1, 2, 3, 4], index=2)


    # KullanÄ±cÄ± girdilerini bir DataFrame'e dÃ¶nÃ¼ÅŸtÃ¼rme
    input_data = pd.DataFrame({
        'Age': [age],
        'DistanceFromHome': [distance_from_home],
        'MonthlyIncome': [monthly_income],
        'YearsAtCompany': [years_at_company],
        'YearsInCurrentRole': [years_in_current_role],
        'YearsSinceLastPromotion': [years_since_last_promotion],
        'EnvironmentSatisfaction': [environment_satisfaction],
        'JobInvolvement': [job_involvement],
        'JobSatisfaction': [job_satisfaction]
    })

    # Overtime sÃ¼tunu iÃ§in dummy (one-hot encoding)
    input_data['OverTime_Yes'] = 1 if overtime == 'Yes' else 0

    # KullanÄ±cÄ±dan gelen veriyi 'Processed_data.csv' verisi ile eÅŸleÅŸtirme
    input_data = pd.concat([df, input_data], axis=0, ignore_index=True).tail(1)  # CSV'den son satÄ±r al

    # SÃ¼tunlarÄ± modeldeki sÄ±raya gÃ¶re yeniden dÃ¼zenleyelim
    input_data = input_data[model_features]

    # KullanÄ±cÄ± girdilerini kullanarak tahmin yapma
    if st.button('Predict Attrition'):
        prediction = Cat_model.predict(input_data)  # KullanÄ±cÄ± verileri ile tahmin yap
        if prediction == 1:
            st.error('The employee may leave the company.')
        else:
            st.success('The employee is likely to stay.')

    # KullanÄ±cÄ±dan alÄ±nan verileri gÃ¶ster
    st.write("Entered Employee Data:")
    st.write(input_data)
